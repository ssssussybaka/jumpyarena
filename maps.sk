
function newMap(m: string, spawnpoint: location):
	set {Maps::maps::%{_m}%::*} to {_m}
	set {Maps::maps::%{_m}%::spawnpoint} to {_spawnpoint}

function removeMap(m: string):
	delete {Maps::maps::%{_m}%::*}

function mapExists(m: string) :: boolean:
	return true if {Maps::maps::*} contains {_m}
	return false

function getMaps() :: strings:
	return {Maps::maps::*}

command /map [<string>] [<string>]:
	permission: maps
	trigger:
		if arg-1 = "create":
			if mapExists(arg-2) = true:
				UserError(player, "Map &9%arg-2%&f already exists.")
				stop
			newMap(arg-2, location of player)
			Success(player, "Successfully created map &9%arg-2%&f.")
		else if arg-1 is "delete" or "remove":
			if mapExists(arg-2) = false:
				UserError(player, "Map &9%arg-2%&f does not exist.")
				stop
			removeMap(arg-2)
			Success(player, "Successfully removed map &9%arg-2%&f.")
		else:
			UserError(player, "Unknown argument. Valid ones are &7create and delete&f.")

command /maps:
	aliases: maplist
	trigger:
		ServerMessage(player, "Maps: &7%getMaps()%")

afasdfasdf
